;-----------------------------------------------------------------------------
; INSTRUCTIONS
;-----------------------------------------------------------------------------
;
; Under normal circumstances, you should not be required to modify
; this file.
;
; In development mode, make sure to export PYTHON_DEVELOP=true for
; faster execution
;
; run `tox` to run the test for all target intepreters
; run `tox -e doc` to build the documentation
;
; You are free to make modification as needed, however, make sure that all
; python versions supported are tested in a single invokation of tox.
;
;-----------------------------------------------------------------------------
;ref: https://tox.readthedocs.io/en/latest/
;
;Tox contains all environments to test projects, build documentation
;and upload the project distribution. It can be thought of as a
;makefile (without the dependency engine). Being written in python,
;it is also more portable than make.
;
;Tox.ini should be self contained and rely on nothing else than the
;availability of python interpreters on the system. This is to ensure
;that consistent results are obtained whether tox is executed on the
;developement environment or not.

;
;Special Environment Variables:
;
;    PYTHON_DEVELOP (true|false) If set to true, assumes development
;                               mode.
;
;Environment List:
;
;    This list shall contain as many as possible of the interpreter
;    versions defined in PYOPSEP-0002. Additional python versions may
;    be supported but are not required.
;
;    Example:
;
;        py27, py36, py37
;
;Standard Environments:
;
;    [testenv]
;
;        This is, as the name says, the default test environment
;        which will match all environments in the environment list
;        matching the Tox's default environments.
;
;        REQUIRED BY CI
;
;    [testenv:lint]
;
;        lints the code (using flake8)
;
;    [testenv:doc]
;
;        This environment builds the documentation.
;
;        REQUIRED BY CI
;
;    [testenv:upload]
;
;        Uploads a distribution to a devpi index.
;-----------------------------------------------------------------------------
[tox]
envlist = py{36,37,38}
skip_missing_interpreters=True
allowlist_externals=docker


[project-info]
;This section defines global settings.
;
; - passenv
;
;           are environment variables that will be propagated to the
;           virtual environment
;
; - develop
;
;           will enable pip pre-release install as well as executing
;           from development workspace (faster) as oppose to creating a
;           distribution.
;
; - whitelist_externals
;
;           allows commands external to the virtual environment to be
;           executed.

project = pyops-staging
package = pyops_staging
develop = {env:PYTHON_DEVELOP:false}
passenv = PYTHON_* LOGNAME* USER* LNAME USERNAME HOME* PROCESSOR_ARCHITEW6432
          PROCESSOR_ARCHITECTURE PIP_CONFIG_FILE LC_CTYPE LC_ALL LANG
whitelist_externals = git

[flake8]
max-line-length = 120
max-complexity = 10
ignore = E203,C901,W503


[testenv]
; Executes tests
pip_pre={[project-info]develop}
usedevelop={[project-info]develop}
passenv={[project-info]passenv}
whitelist_externals={[project-info]whitelist_externals}
deps = .[test]

commands=pytest tests --junitxml=junit-{envname}.xml  {posargs}

[testenv:cov]
pip_pre={[project-info]develop}
usedevelop={[project-info]develop}
passenv={[project-info]passenv}
whitelist_externals={[project-info]whitelist_externals}
deps = .[test]

commands=pytest tests --cov {[project-info]package} --cov-report=term-missing {posargs}

[testenv:lint]
deps = flake8
commands = flake8 src/{[project-info]package} {posargs}


[testenv:doc]
; build documentation
pip_pre={[project-info]develop}
usedevelop={[project-info]develop}
passenv = {[project-info]passenv}
whitelist_externals = {[project-info]whitelist_externals}
basepython = python
deps = .[doc]
commands = python setup.py build_sphinx -a -E
